[comment encoding = UTF-8 /]
[module generateDynamics('http://ualberta.edu.cs.ssrg.phy.dynamics')]


[template public generateElement(aDynamics : Dynamics)]
[comment @main /]
[file ('MainActivity.java', false, 'UTF-8')]
package edu.ualberta.ssrg.mda.physics.template.main;

import java.util.Calendar;
import java.util.List;

import org.jbox2d.common.Vec2;
import org.jbox2d.dynamics.Body;

import edu.ualberta.ssrg.mda.physics.template.persistence.DBExporter;
import edu.ualberta.ssrg.mda.physics.template.persistence.PlainEventExporter;
import edu.ualberta.ssrg.mda.physics.template.persistence.ScoreVO;
import edu.ualberta.ssrg.mda.physics.template.persistence.ScoresDAO;
import edu.ualberta.ssrg.mda.physics.template.persistence.Event;
import edu.ualberta.ssrg.mda.physics.template.registers.IScoreRegister;
import edu.ualberta.ssrg.mda.physics.template.registers.ScoreRegisterDevice;
import edu.ualberta.ssrg.mda.physics.template.registers.ScoreRegisterRest;
import edu.ualberta.ssrg.mda.physics.template.registers.ScoresRegisterSOAP;
import edu.ualberta.ssrg.mda.physics.template.main.R;
import edu.ualberta.ssrg.mda.physics.template.main.PhysicsView.TimeObjectAppearActivity;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.content.pm.ActivityInfo;
//import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.Gravity;
import android.view.Menu;
//import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.Surface;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

// This game template was developed based on the Testing-Box2d Project
// Available in https://code.google.com/p/testing-box2d/ under MIT license
public class MainActivity extends Activity {

	// Constants
	private static final String PREF_ROTATION = "pref.key.rotation";
	private static final String PREF_GRAVITY = "pref.key.gravity";
	private static final int GRAVITY_NORMAL = 0;
	private static final int GRAVITY_MOON = 3;
	private static final int GRAVITY_ZERO = 1;
	private static final int GRAVITY_ACCELEROMETER = 2;
	public static final int OBSTACLE_NUMBER = 2;
	public static final int TIME = 3000;

	public int[ '[' /][ ']' /] coordinates;

	// ////////////////////////////////////
	// Main resources
	// ////////////////////////////////////

	// The game canvas (representation of the PhysicsWorld model)
	private PhysicsView viewCanvas;

	// The game physics word model
	private PhysicsModel world;

	// The registers (soap, in-device, and rest)-based helpers
	private IScoreRegister registerSOAP;
	private IScoreRegister registerDevice;
	private IScoreRegister registerRest;

	// DAO manager of the game
	private ScoresDAO database;

	// Database Exporter
	private DBExporter dbExporter;

	// Observable bridge for asynchronous touch notifications (score manager)
	private ObservableWrapper<Event> runway;

	// Score Manager
	private ScoringManager scoreManager;

	// Collision detector
	private CollisionManager collisionManager;

	// Control Manager
	private ControlManager controlManager;
	
	// States
	private boolean welcomed;
	private int rotation;
	private int gravity;

	// Session Information
	private String username = "";

	// Canvas update independent thread
	private Runnable r;

	// Called when the game starts
	@Override
	public void onCreate(Bundle savedInstanceState) {
		// Recovering game previous state
		super.onCreate(savedInstanceState);
		
		createWorld();
		
		scoreManager = new ScoringManager(this);
		controlManager = new ControlManager(world);

		viewCanvas = new PhysicsView(this, this);
		viewCanvas.setModel(world);
		viewCanvas.setController(controlManager);
		setContentView(viewCanvas);

		setupRunway();
		
		database = new ScoresDAO(this);
		registerSOAP = new ScoresRegisterSOAP();
		registerRest = new ScoreRegisterRest();
		registerDevice = new ScoreRegisterDevice(database);
		dbExporter = new DBExporter();

		if (!welcomed) {
			showWelcomeView();
			welcomed = true;
		}

	}
	
	private void createWorld() {
		// Default New World: new World(new Vec2(0.0f, -10.0f), true);
		// Define Gravity for the world according to the previous instance
		gravity = getPreferences(Context.MODE_PRIVATE).getInt(PREF_GRAVITY,	GRAVITY_NORMAL);
		
		// Creates new world
		if (world == null) {
			// Initialize Gravity Vector (No Modification to 'Y' acceleration)
			Vec2 grav = new Vec2(0.0f, [environment.gravity/]f);
			world = new PhysicsModel();
			collisionManager = new CollisionManager(world);
			world.create(grav, collisionManager);
		}
	}
	
	private void setupRunway() {
		runway = new ObservableWrapper<Event>();
		
		collisionManager.setRunway(runway);
		viewCanvas.setRunway(runway);
		registerEventObservers();
	}

	// Sets new timed activities in the gameplay, activities are not executed,
	// but added to the queue.
	private void setActivitiesToView() {
		// Setting activities

		[for (it : AppearActivity | appearActivities)]
		TimeObjectAppearActivity [it.activityId/]  = viewCanvas.new TimeObjectAppearActivity();
		[it.activityId/].setObjectId(PhysicsView.[it.actorId/]Id);
		[it.activityId/].setType(PhysicsView.BODY_TYPE_CIRCLE);
		[it.activityId/].setRadius(0.2f);
		[it.activityId/].setX([it.positionX/]);
		[it.activityId/].setY([it.positionY/]);
		[it.activityId/].setaSpeed([it.angularSpeed/]f);
		[it.activityId/].setlSpeed([it.linearSpeed/]f);
		[it.activityId/].setFrequency((int)[it.frequency/]*1000);
		viewCanvas.setActivity([it.activityId/] );
		[/for]
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
	}

	@Override
	public Object onRetainNonConfigurationInstance() {
		return world;
	}

	@Override
	protected void onResume() {

		super.onResume();

		r = new Runnable() {
			public void run() {
				world.update();
				viewCanvas.invalidate();
				getWindow().getDecorView().postDelayed(r, 10);
			}
		};

		getWindow().getDecorView().post(r);
		rotation = getWindowManager().getDefaultDisplay().getOrientation();

		Editor editor = getPreferences(Context.MODE_PRIVATE).edit();
		editor.putInt(PREF_ROTATION, rotation);
		editor.commit();

		if (gravity == GRAVITY_ACCELEROMETER) {
			SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
			Sensor sensor = sensorManager
					.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);

			if (sensor != null) {
				sensorManager.registerListener(listener, sensor,
						SensorManager.SENSOR_DELAY_NORMAL);
			}
		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		getWindow().getDecorView().removeCallbacks(r);
		SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
		sensorManager.unregisterListener(listener);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	// On menu remove action, remove all the objects from the world
	private void removeObjects() {
		world.clearWorld();
	}

	// Manages gyroscope events, and impacts gravity vector according screen
	// rotation
	private final SensorEventListener listener = new SensorEventListener() {

		public void onSensorChanged(SensorEvent event) {
			float x, y;
			if (rotation == Surface.ROTATION_0) {
				x = -event.values[ '[' /]SensorManager.DATA_X[ ']' /];
				y = -event.values[ '[' /]SensorManager.DATA_Y[ ']' /];
			} else if (rotation == Surface.ROTATION_90) {
				x = event.values[ '[' /]SensorManager.DATA_Y[ ']' /];
				y = -event.values[ '[' /]SensorManager.DATA_X[ ']' /];
			} else if (rotation == Surface.ROTATION_180) {
				x = event.values[ '[' /]SensorManager.DATA_X[ ']' /];
				y = event.values[ '[' /]SensorManager.DATA_Y[ ']' /];
			} else {
				x = -event.values[ '[' /]SensorManager.DATA_Y[ ']' /];
				y = event.values[ '[' /]SensorManager.DATA_X[ ']' /];
			}
			world.getWorld().setGravity(new Vec2(x, y));
		}

		public void onAccuracyChanged(Sensor sensor, int accuracy) {
		}
	};

	// /////////////////////////////////////////////////
	// Master Event and Activity Shifting Management
	// /////////////////////////////////////////////////
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		String date = java.text.DateFormat.getDateTimeInstance().format(Calendar.getInstance().getTime());

		// End Game Activity Events
		if (requestCode == EndGameActivity.LISTENER_CODE) {
			Bundle extras = data.getExtras();
			if (extras != null) {
				String eventId = extras.getString(EndGameActivity.EVENT_FLAG);

				if (eventId.equals(EndGameActivity.NEW_GAME_EVENT)) {
					startGame();
					
				} 
				else if (eventId.equals(EndGameActivity.SAVE_DEVICE_EVENT)) {
					//registerDevice.submitScore(username,scoreManager.getScoreVO(), null);
					PlainEventExporter.printEvents("[ '[' /]" + username + "[ ']' /]" + " [ '[' /]"+ date + "[ ']' /] "	+ scoreManager.getScoreVO().getEvents());
					showToast(0, 10, getResources().getString(R.string.Mettrics_added_locally));
					showEndOfGameView();
				} 
				else if (eventId.equals(EndGameActivity.SEND_REST_EVENT)) {
					registerRest.submitScore(username,scoreManager.getScoreVO(), null);
					showToast(0, 10, getResources().getString(R.string.sent_via_Rest));
					startGame();
				} 
				else if (eventId.equals(EndGameActivity.SEND_SERVICE_EVENT)) {
					registerSOAP.submitScore(username,scoreManager.getScoreVO(), null);
					showToast(0, 10, getResources().getString(R.string.sent_via_soap));
					startGame();
				} 
				else if (eventId.equals(EndGameActivity.VIEW_SCORES)) {
					showScoreListView();
				} 
				else if (eventId.equals(EndGameActivity.CLOSE)) {
					viewCanvas.stopActivities();
					dbExporter.execute();
					finish();
				}
			}
		}

		// Welcome Activity Events
		else if (requestCode == WelcomeActivity.START) {
			Bundle extras = data.getExtras();
			if (extras != null) {
				username = extras.getString(WelcomeActivity.USERNAME);
			}
			startGame();

		} else if (requestCode == ScoresActivity.BACK) {
			showEndOfGameView();
		}
	}

	// Displays the score list, uses the ActivityBridge to pass the score list
	// from the database
	private void showScoreListView() {
		database.open();
		List<ScoreVO> values = database.getAllScores();

		database.close();
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
		Intent intent = new Intent(viewCanvas.getContext(),	ScoresActivity.class);
		ActivitiesBridge.setObject(values);
		this.startActivityForResult(intent, ScoresActivity.BACK);
	}

	// Displays the end of game view (menu)
	public void showEndOfGameView() {
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
		viewCanvas.stopActivities();
		viewCanvas.restartCanvas();
		removeObjects();

		Intent intent = new Intent(this, EndGameActivity.class);
		ScoreVO eScore = scoreManager.getScoreVO();
		ActivitiesBridge.setObject(eScore);
		intent.putExtra("USERNAME", username);
		this.startActivityForResult(intent, EndGameActivity.LISTENER_CODE);

	}


	// Displays the welcome view
	private void showWelcomeView() {
		Intent intent = new Intent(this, WelcomeActivity.class);
		startActivityForResult(intent, WelcomeActivity.START);
	}

	// ////////////////////////////////////////////////////////////////////
	// Default Main Menu Event Handler
	// ///////////////////////////////////////////////////////////////////

	// Clear the canvas, rotate screen, change gravity, close the app
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		switch (item.getItemId()) {
		case R.id.start: {

			return true;
		}
		case R.id.stop: {
			return true;
		}
		case R.id.results: {
			showEndOfGameView();

		}
		case R.id.item_close: {
			finish();
		}
		
		 
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	// ////////////////////////////
	// Utilities
	// ////////////////////////////

	// Restarts the game (remove all the objects from the model, and resets the
	// collision detector
	private void startGame() {
		removeObjects();

		viewCanvas.restartCanvas();
		setActivitiesToView();
		
		scoreManager.reset();
		scoreManager.initializeTimedEvents();
		showToast(0, 365, getResources().getString(R.string.touchToStart));

	}

	// Shows a simple toast to the user
	public void showToast(int x, int y, String text) {
		Context context = getApplicationContext();
		int duration = Toast.LENGTH_SHORT;
		Toast toast = makeCuztomizedToast(x, y, context, text, duration);
		toast.show();
	}

	// Registers a observer in the event hub (runway)
	public void registerEventObservers() {
		runway.addObserver(scoreManager);
		runway.addObserver(controlManager);
	}

	public static Toast makeCuztomizedToast(int x, int y, Context contextP,	CharSequence text, int duration) {
		
		Toast toast = Toast.makeText(contextP, text, duration);
		toast.setGravity(Gravity.BOTTOM, x, y);
		View rootView = toast.getView();
		LinearLayout linearLayout = null;
		TextView messageTextView = null;

		// check (expected) toast layout
		if (rootView instanceof LinearLayout) {
			linearLayout = (LinearLayout) rootView;

			if (linearLayout.getChildCount() == 1) {
				View child = linearLayout.getChildAt(0);

				if (child instanceof TextView) {
					messageTextView = (TextView) child;
				}
			}
		}

		if (linearLayout == null || messageTextView == null) {
			return toast;
		}

		messageTextView.setTextSize(25);
		messageTextView.setGravity(Gravity.CENTER);
		ViewGroup.LayoutParams textParams = messageTextView.getLayoutParams();

		((LinearLayout.LayoutParams) textParams).gravity = Gravity.CENTER_HORIZONTAL;

		return toast;
	}


	public void getTouchLocation(float x, float y) {
		coordinates = new int[ '[' /][ ']' /]{(int) x,(int) y};
	}

	public int getX() {
		return coordinates[ '[' /]0[ ']' /];
	}

	public int getY() {
		return coordinates[ '[' /]1[ ']' /];
	}

	public void removebody(Body a) {
		viewCanvas.removeBody(a);
	}

	public int getScore() {
		return scoreManager.getScoreTotal();
	}

	public int getTimer() {
		return viewCanvas.getTimerNumber();
	}
}
[/file]
[/template]