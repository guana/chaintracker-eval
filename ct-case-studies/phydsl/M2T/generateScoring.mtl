[comment encoding = UTF-8 /]
[module generateScoring('http://ualberta.edu.cs.ssrg.phy.scoring')]


[template public generateElement(aScoreRules : ScoreRules)]
[comment @main/]
[file ('ScoringManager.java', false, 'UTF-8')]
package edu.ualberta.ssrg.mda.physics.template.main;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Observable;
import java.util.Observer;

import org.jbox2d.dynamics.Body;

import android.os.AsyncTask;
import android.util.Log;

import edu.ualberta.ssrg.mda.physics.template.persistence.ScoreVO;
import edu.ualberta.ssrg.mda.physics.template.persistence.Event;

public class ScoringManager implements Observer {

	MainActivity mainActivity;
	private int scoreTotal;

	private ArrayList<Event> touchEvents;
	
	private Event recentHitEvent;
	private int debounceTime = 500; 
	
	private boolean playerWins;
	protected boolean gameEnds;
	protected boolean gameEndInitiated;
	protected boolean combo = false;

	public ScoringManager() {
		scoreTotal = 0;
		playerWins = false;
		gameEnds = false;
		gameEndInitiated = false;
		touchEvents = new ArrayList<Event>();
	}

	public ScoringManager(MainActivity mainActivity) {
		this();
		this.mainActivity = mainActivity;
	}

	public int getScoreTotal() {
		return scoreTotal;
	}

	public void setScoreTotal(int scoreTotal) {
		this.scoreTotal = scoreTotal;
	}

	public boolean playerWins() {
		return playerWins;
	}

	public void setplayerWins(boolean playerWins) {
		this.playerWins = playerWins;
	}

	// Scoring Rule Collection
	public void update(Observable o, Object pl) {

		ArrayList<Event> payload = (ArrayList<Event>) pl;
		Event ev = payload.get(0);
		Event.EventType type = ev.getType();

		// Simple Touching
		if (type == Event.EventType.TOUCH) {
			// Register the touch event for statistics
			touchEvents.add(ev);
			
			Body a = ev.getBodies().get(0);

			[for (touchRule: TouchRule | touches)]
			if(a.m_userData.equals(PhysicsView.[touchRule.actorId/]Id)){
				recentHitEvent = ev;

				scoreTotal += [touchRule.touchAction.points/];
				playerWins = ![touchRule.touchAction.userLoses/];
				gameEnds = [touchRule.touchAction.gameEnds/];
				[if (touchRule.touchAction.removeActorId.equalsIgnoreCase(touchRule.actorId))]
				mainActivity.removebody(a);
				[/if]
			}
			[/for]
			
		}
		
		// Collision of two objects coming from the collision collector.
		else if (type == Event.EventType.COLLISION) {
			if (ev.getBodies().size() == 2 && 	!ignoreEvent(ev)) {
				Body a = ev.getBodies().get(0);
				Body b = ev.getBodies().get(1);

				[for (collisionRule: CollisionRule | collisions)]
				if((a.m_userData.equals(PhysicsView.[collisionRule.actorAId/]Id) && b.m_userData.equals(PhysicsView.[collisionRule.actorBId/]Id)) || 
						b.m_userData.equals(PhysicsView.[collisionRule.actorAId/]Id) && a.m_userData.equals(PhysicsView.[collisionRule.actorBId/]Id)){
					recentHitEvent = ev;

					scoreTotal += [collisionRule.collisionAction.points/];
					playerWins = ![collisionRule.collisionAction.userLoses/];
					gameEnds = [collisionRule.collisionAction.gameEnds/];
					[if (collisionRule.collisionAction.removeActorId.equalsIgnoreCase(collisionRule.actorAId))]
					if(a.m_userData.equals(PhysicsView.[collisionRule.actorAId/]Id)) {
						mainActivity.removebody(a);
					} else if (b.m_userData.equals(PhysicsView.[collisionRule.actorAId/]Id)) {
						mainActivity.removebody(b);
					}
					[/if]
					[if (collisionRule.collisionAction.removeActorId.equalsIgnoreCase(collisionRule.actorBId))]
					if(a.m_userData.equals(PhysicsView.[collisionRule.actorBId/]Id)) {
						mainActivity.removebody(a);
					} elsif (b.m_userData.equals(PhysicsView.[collisionRule.actorBId/]Id)) {
						mainActivity.removebody(a);
					}
					[/if]
				}

				[/for]
			}
		}


		if (gameEnds && !gameEndInitiated) {
			gameEndInitiated = true;
			mainActivity.showEndOfGameView();
		}
	}

	public ScoreVO getScoreVO() {
		ScoreVO a = new ScoreVO();
		a.setScoreTotal(String.valueOf(scoreTotal));
		if (scoreTotal>380) { // playerWins
			a.setPlayerFinalState(mainActivity.getResources().getString(	R.string.Wins));
		} else {
			a.setPlayerFinalState(mainActivity.getResources().getString(	R.string.Lost));
		}

		a.setEvents(touchEvents.toString());

		return a;
	}

	// Filter for small precision
	public static double round(double unrounded, int precision, int roundingMode) {
		BigDecimal bd = new BigDecimal(unrounded);
		BigDecimal rounded = bd.setScale(precision, roundingMode);
		return rounded.doubleValue();
	}

	public Object getTouchEvents() {
		return touchEvents;
	}
	
	public void reset() {
		scoreTotal = 0;
		playerWins = false;
		gameEnds = false;
		gameEndInitiated = false;
		touchEvents = new ArrayList<Event>();
	}

	public void initializeTimedEvents() {
		[for (timeRule: TimedRule | timed)]
		TimedScoreActivity [timeRule.timedId/] = new TimedScoreActivity();
		[timeRule.timedId/].setGameEnding([timeRule.timedAction.gameEnds/]);
		[timeRule.timedId/].setplayerWinsState(![timeRule.timedAction.userLoses/]);
		[timeRule.timedId/].setPoints([timeRule.timedAction.points/] );
		[timeRule.timedId/].setTimer([timeRule.time/]*1000 );
		[timeRule.timedId/].execute((Void[ '[' /][ ']' /])null);
		[/for]
	}
	
	private boolean ignoreEvent(Event ev)
	{
		if (recentHitEvent == null)
			return false;
		
		if(Math.abs(recentHitEvent.getTime() - ev.getTime()) > debounceTime)
			return false;
		
		if (recentHitEvent.getType() != ev.getType())
			return false;
		
		ArrayList<Body> recentEventBodies = recentHitEvent.getBodies();
		ArrayList<Body> eventBodies = ev.getBodies();
		
		Collections.sort(recentEventBodies, new Comparator<Body>() {
	        public int compare(Body b1, Body  b2)
	        {
	        	if ( b1.m_userData == b2.m_userData)
	        		return 0;
	            return  -1;
	        }
	    });
		
		
		Collections.sort(eventBodies, new Comparator<Body>() {
	        public int compare(Body b1, Body  b2)
	        {
	        	if ( b1.m_userData == b2.m_userData)
	        		return 0;
	            return  -1;
	        }
	    });
		
		if (recentHitEvent.getBodies().size() != ev.getBodies().size())
			return false;
		
		for (int i = 0; i < recentEventBodies.size(); i++) {
			if (recentEventBodies.get(i) != eventBodies.get(i)) {
				return false; 
			}
		}
				
		return true;		
	}

	// Timed Rules Manager
	protected class TimedScoreActivity extends	AsyncTask<Void, Void, Void> {

		private int points;
		private boolean gameEnding;
		private boolean playerWinsState;
		private int timer;

		public int getTimer() {
			return timer;
		}

		public void setTimer(int timer) {
			this.timer = timer;
		}

		public int getPoints() {
			return points;
		}

		public void setPoints(int points) {
			this.points = points;
		}

		public boolean isGameEnding() {
			return gameEnding;
		}

		public void setGameEnding(boolean gameEnding) {
			this.gameEnding = gameEnding;
		}

		public boolean playerWinsState() {
			return playerWinsState;
		}

		public void setplayerWinsState(boolean playerWinsState) {
			this.playerWinsState = playerWinsState;
		}

		@Override
		protected Void doInBackground(Void... params) {
			
			Thread t = new Thread() {
				public void run() {
					while (!gameEnds) {
						try {
							Thread.sleep(getTimer());
							// Caught by onProgressUpdate below
							gameEnds = gameEnding;
							scoreTotal += points;
							playerWins = playerWinsState;
							publishProgress();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			};
			t.start();
	
			return null;
		}

		@Override
		protected void onProgressUpdate(Void... values) {
			if (gameEnds && !gameEndInitiated) {
				gameEndInitiated = true;
				mainActivity.showEndOfGameView();

			}
		}

		@Override
		protected void onPostExecute(Void result) {
	
		}
	}
}
[/file]
[/template]